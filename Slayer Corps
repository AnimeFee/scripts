   local OrionLib = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Orion/main/source'))()
    if not OrionLib then
        error("Failed to load the OrionLib library")
        return
    end
local Window = OrionLib:MakeWindow({
        Name = "Slayer Corps",
        HidePremium = false,
        SaveConfig = true,
        ConfigFolder = "WendelCfg",
        IntroEnabled = false
    })
getgenv().Settings = {
        AutoDungeon = false, 
	mespetsequiper = {},
	Range = 500,
	AutoFarm = false,
	WalkToEnemy = false,
	DamageBoost = false,
	GoldCollect = false,
	lv10gem = false,
	delgem = false,
    }
   
 local PlayerTab = Window:MakeTab({
        Name = "Player",
        Icon = "rbxassetid://4483345998",
        PremiumOnly = false
    })
    local ScriptsTab = Window:MakeTab({
        Name = "Scripts",
        Icon = "rbxassetid://4483345998",
        PremiumOnly = false
    })

PlayerTab:AddButton({
Name = "Group Rewards",
Callback = function()
while wait() do
game:GetService("ReplicatedStorage").Remotes.ClaimGroupReward:InvokeServer()
end
end
})
 
PlayerTab:AddButton({
Name = "Daily Gifts",
Callback = function()
while wait() do
for x = 1, 7 do
local args = {
[1] = x
}
game:GetService("ReplicatedStorage").Remotes.ClaimSevenLoginReward:FireServer(unpack(args))
end
end
end
})
 
 
PlayerTab:AddButton({
Name = "Redeem Codes",
Callback = function()
while wait() do
for x = 1, 1000 do
local args = {
    [1] = x
}
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("GiftCodeReceived"):InvokeServer(unpack(args))
end
end
end
})


PlayerTab:AddButton({
Name = "Redeem Spins",
Callback = function()
while wait() do
for x = 1, 10 do
local args = {
    [1] = x
}
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ClaimActivitySpinTicket"):InvokeServer(unpack(args))
end
end
end
})

ScriptsTab:AddToggle({
    Name = "Auto Farm",
    Callback = function(state)
        if state then
            getgenv().Settings.AutoFarm = true
        else
            getgenv().Settings.AutoFarm = false
        end
    end,
})

ScriptsTab:AddToggle({Name="Auto Collect Drops",Callback=function(state)
	if state then
		getgenv().Settings.GoldCollect = not getgenv().Settings.GoldCollect;
		if getgenv().Settings.GoldCollect then
			spawn(function()
				while wait() do
					for _, v in pairs(game.Workspace.Golds:GetChildren()) do
						v.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame;
					end
				end
			end);
		end
	end
end});

ScriptsTab:AddToggle({
    Name = "Damage Boost",
    Callback = function(state)
        if state then
            getgenv().Settings.DamageBoost = true
        else
            getgenv().Settings.DamageBoost = false
        end
    end,
})

--Anti-AFk
spawn(function()
for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.Idled)) do
v:Disable()
end
end)
spawn(function()
while wait(15) do
local VirtualUser=game:service'VirtualUser'
VirtualUser:CaptureController()
VirtualUser:ClickButton2(Vector2.new())
end
end)
   
 ScriptsTab:AddButton({
        Name = "Auto Fuse Swords",
        Callback = function()
            while wait() do
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("FuseWeapon"):FireServer()
end
        end
    })

    ScriptsTab:AddButton({
        Name = "SimpleSpy",
        Callback = function()
            loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/78n/SimpleSpy/main/SimpleSpyBeta.lua"))()
        end
    })
    local AutoDungeonTab = Window:MakeTab({
        Name = "Auto-Dungeon",
        Icon = "rbxassetid://4483345998",
        PremiumOnly = false
    })
    local FuseGemTab = Window:MakeTab({
        Name = "Auto-FuseGem",
        Icon = "rbxassetid://4483345998",
        PremiumOnly = false
    })

local legendaryTab = Window:MakeTab({Name="Roll-Tab-Legendary", Icon="rbxassetid://4483345998", PremiumOnly=false})
local function rerollLegendaryMask()
    local rerollFound = false
    repeat
        local rerollAttempt = {[1]=400001}
        local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt))
        wait(0.1)
        if tostring(rerollResult.ornamentId) ~= "410001" and tostring(rerollResult.ornamentId) ~= "410002" and tostring(rerollResult.ornamentId) ~= "410003" and tostring(rerollResult.ornamentId) ~= "410004" and tostring(rerollResult.ornamentId) ~= "410005" then
            print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId))
            rerollFound = true
        end
        if tostring(rerollResult.ornamentId) == "410004" or tostring(rerollResult.ornamentId) == "410005" then
            local rerollType = "None"
            if tostring(rerollResult.ornamentId) == "410004" then
                rerollType = "Legendary"
            elseif tostring(rerollResult.ornamentId) == "410005" then
                rerollType = "Rainbow"
            end
            print("!! REROLL FOUND !! : " .. rerollType)
            rerollFound = true
        end
    until rerollFound
end
legendaryTab:AddButton({Name="Reroll Mask", Callback=rerollLegendaryMask})

local function rerollLegendaryAwakening()
    local rerollFound = false
    repeat
        local rerollAttempt = {[1]=400002}
        local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt))
        wait(0.1)
        if tostring(rerollResult.ornamentId) ~= "410006" and tostring(rerollResult.ornamentId) ~= "410007" and tostring(rerollResult.ornamentId) ~= "410008" and tostring(rerollResult.ornamentId) ~= "410009" and tostring(rerollResult.ornamentId) ~= "410010" then
            print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId))
            rerollFound = true
        end
        if tostring(rerollResult.ornamentId) == "410009" or tostring(rerollResult.ornamentId) == "410010" then
            local rerollType = "None"
            if tostring(rerollResult.ornamentId) == "410009" then
                rerollType = "Legendary"
            elseif tostring(rerollResult.ornamentId) == "410010" then
                rerollType = "Rainbow"
            end
            print("!! REROLL FOUND !! : " .. rerollType)
            rerollFound = true
        end
    until rerollFound
end
legendaryTab:AddButton({Name="Reroll Awakening", Callback=rerollLegendaryAwakening})

local function rerollLegendaryOrnament()
    local rerollFound = false
    repeat
        local rerollAttempt = {[1]=400003}
        local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt))
        wait(0.1)
        if tostring(rerollResult.ornamentId) ~= "410011" and tostring(rerollResult.ornamentId) ~= "410012" and tostring(rerollResult.ornamentId) ~= "410013" and tostring(rerollResult.ornamentId) ~= "410014" and tostring(rerollResult.ornamentId) ~= "410015" then
            print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId))
            rerollFound = true
        end
        if tostring(rerollResult.ornamentId) == "410014" or tostring(rerollResult.ornamentId) == "410015" then
            local rerollType = "None"
            if tostring(rerollResult.ornamentId) == "410014" then
                rerollType = "Legendary"
            elseif tostring(rerollResult.ornamentId) == "410015" then
                rerollType = "Rainbow"
            end
            print("!! REROLL FOUND !! : " .. rerollType)
            rerollFound = true
        end
    until rerollFound
end
legendaryTab:AddButton({Name="Reroll Ornament", Callback=rerollLegendaryOrnament})

local function rerollLegendaryTrail()
    local rerollFound = false
    repeat
        local rerollAttempt = {[1]=400004}
        local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt))
        wait(0.1)
        if tostring(rerollResult.ornamentId) ~= "410016" and tostring(rerollResult.ornamentId) ~= "410017" and tostring(rerollResult.ornamentId) ~= "410018" and tostring(rerollResult.ornamentId) ~= "410019" and tostring(rerollResult.ornamentId) ~= "410020" then
            print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId))
            rerollFound = true
        end
        if tostring(rerollResult.ornamentId) == "410019" or tostring(rerollResult.ornamentId) == "410020" then
            local rerollType = "None"
            if tostring(rerollResult.ornamentId) == "410019" then
                rerollType = "Legendary"
            elseif tostring(rerollResult.ornamentId) == "410020" then
                rerollType = "Rainbow"
            end
            print("!! REROLL FOUND !! : " .. rerollType)
            rerollFound = true
        end
    until rerollFound
end
legendaryTab:AddButton({Name="Reroll Trail", Callback=rerollLegendaryTrail})

local mythicTab = Window:MakeTab({Name="Roll-Tab-Mythics", Icon="rbxassetid://4483345998", PremiumOnly=false})
local function rerollMythicMask()
    local rerollFound = false
    repeat
        local rerollAttempt = {[1]=400001}local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt))
        wait(0.1)
        if tostring(rerollResult.ornamentId) ~= "410001" and tostring(rerollResult.ornamentId) ~= "410002" and tostring(rerollResult.ornamentId) ~= "410003" and tostring(rerollResult.ornamentId) ~= "410004" and tostring(rerollResult.ornamentId) ~= "410005" then
            print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId))
            rerollFound = true
        end
        if tostring(rerollResult.ornamentId) == "410005" then
            local rerollType = "None"
            if tostring(rerollResult.ornamentId) == "410005" then
                rerollType = "Rainbow"
            end
            print("!! REROLL FOUND !! : " .. rerollType)
            rerollFound = true
        end
    until rerollFound
end
mythicTab:AddButton({Name="Reroll Mask", Callback=rerollMythicMask})

local function rerollMythicAwakening()
    local rerollFound = false
    repeat
        local rerollAttempt = {[1]=400002}
        local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt))
        wait(0.1)
        if tostring(rerollResult.ornamentId) ~= "410006" and tostring(rerollResult.ornamentId) ~= "410007" and tostring(rerollResult.ornamentId) ~= "410008" and tostring(rerollResult.ornamentId) ~= "410009" and tostring(rerollResult.ornamentId) ~= "410010" then
            print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId))
            rerollFound = true
        end
        if tostring(rerollResult.ornamentId) == "410010" then
            local rerollType = "None"
            if tostring(rerollResult.ornamentId) == "410010" then
                rerollType = "Rainbow"
            end
            print("!! REROLL FOUND !! : " .. rerollType)
            rerollFound = true
        end
    until rerollFound
end
mythicTab:AddButton({Name="Reroll Awakening", Callback=rerollMythicAwakening})

local function rerollMythicOrnament()
    local rerollFound = false
    repeat
        local rerollAttempt = {[1]=400003}
        local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt))
        wait(0.1)
        if tostring(rerollResult.ornamentId) ~= "410011" and tostring(rerollResult.ornamentId) ~= "410012" and tostring(rerollResult.ornamentId) ~= "410013" and tostring(rerollResult.ornamentId) ~= "410014" and tostring(rerollResult.ornamentId) ~= "410015" then
            print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId))
            rerollFound = true
        end
        if tostring(rerollResult.ornamentId) == "410015" then
            local rerollType = "None"
            if tostring(rerollResult.ornamentId) == "410015" then
                rerollType = "Rainbow"
            end
            print("!! REROLL FOUND !! : " .. rerollType)
            rerollFound = true
        end
    until rerollFound
end
mythicTab:AddButton({Name="Reroll Ornament", Callback=rerollMythicOrnament})

local function rerollMythicTrail()
    local rerollFound = false
    repeat
        local rerollAttempt = {[1]=400004}
        local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt))
        wait(0.1)
        if tostring(rerollResult.ornamentId) ~= "410016" and tostring(rerollResult.ornamentId) ~= "410017" and tostring(rerollResult.ornamentId) ~= "410018" and tostring(rerollResult.ornamentId) ~= "410019" and tostring(rerollResult.ornamentId) ~= "410020" then
            print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId))
            rerollFound = true
        end
        if tostring(rerollResult.ornamentId) == "410020" then
            local rerollType = "None"
            if tostring(rerollResult.ornamentId) == "410020" then
                rerollType = "Rainbow"
            end
            print("!! REROLL FOUND !! : " .. rerollType)
            rerollFound = true
        end
    until rerollFound
end
mythicTab:AddButton({Name="Reroll Trail", Callback=rerollMythicTrail}) 
    
local AutoRaidTab = Window:MakeTab({
        Name = "Auto-Raid",
        Icon = "rbxassetid://4483345998",
        PremiumOnly = false
    })
AutoRaidTab:AddButton({
        Name = "AutoCollectChestInRaid",
        Callback = function()
            loadstring(game:HttpGet('https://raw.githubusercontent.com/xALLQWT/AUTORAID/main/g'))() 
        end
    })
    local difficultyDropdown = AutoRaidTab:AddDropdown({
        Name = "Difficulty",
        Options = {"Easy", "Medium", "Hard", "Impossible"},
        CurrentOption = "1",
        Callback = function(option)
            G.difficulty = tonumber(option)
        end
    })
    local AutoRaidToggle = AutoRaidTab:AddToggle({
        Name = "Auto-Raid",
        Default = false,
        Callback = function(Value)
            if Value then
                local function restartScript()
                    local userID = game.Players.LocalPlayer.UserId
                    local args = {
                        [1] = "Room3"
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("EnterRaidRoom"):FireServer(unpack(args))
                    args = {
                        [1] = {
                            ["difficulty"] = G.difficulty,
                            ["roomName"] = "Room3",
                            ["selectMapId"] = 50105
                        }
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("SelectRaidsDifficulty"):FireServer(unpack(args))
                    args = {
                        [1] = {
                            ["userIds"] = {
                                [1] = userID
                            },
                            ["roomName"] = "Room3"
                        }
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("StartChallengeRaidMap"):InvokeServer(unpack(args))
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleportSuccess"):InvokeServer()
                    wait(240)
                    args = {
                        [1] = {
                            ["currentSlotIndex"] = 1,
                            ["toMapId"] = 50201
                        }
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("QuitRaidsMap"):InvokeServer(unpack(args))
                    wait(60)
                    restartScript()
                end
                restartScript()
            end
        end
    })

local function TeleportToAndFromDungeon(dungeonMapId, returnMapId, returnTime)
    -- Teleport the player to the specified dungeon
    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(
        {
            ["mapId"] = dungeonMapId
        }
    )
    wait(returnTime)
    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(
        {
            ["mapId"] = returnMapId
        }
    )
end
local AutoDungeonToggle =
    AutoDungeonTab:AddToggle(
    {
        Name = "Auto-Dungeon(FINALLY FIXED!!!)",
        Default = false,
        Callback = function(Value)
            if Value then
                while true do
                    local currentTime = os.time()
                    local nextTeleportTime = math.ceil(currentTime / (30 * 60)) * (30 * 60) - 15
                    local waitTime = nextTeleportTime - currentTime
                    wait(waitTime)
                    TeleportToAndFromDungeon(50016, 50001, 15 * 60)
                end
            end
        end
    }
)
           
local WeaponsInventory = require(game:GetService("ReplicatedStorage").Scripts.Client.Manager.PlayerManager)
pcall(function()
    for _, v in pairs(WeaponsInventory.localPlayerData.heros) do
        if v.isEquip == true then
            table.insert(getgenv().Settings.mespetsequiper, v.guid)
        end
    end
end)

spawn(function()
    local function GetEnemies()
        local nearest, dist = nil, getgenv().Settings.Range
        local Players = game.Players
        local localPlayer = Players.LocalPlayer
        local localCharacter = localPlayer.Character
        local humanoidRootPart = localCharacter and localCharacter:FindFirstChild("HumanoidRootPart")
        if not humanoidRootPart then return end
        for _, enemy in pairs(Workspace.Enemys:GetChildren()) do
            if enemy:FindFirstChild("HumanoidRootPart") and enemy.HumanoidRootPart:FindFirstChild("EnemyNameGui") and enemy.HumanoidRootPart.EnemyNameGui.HealthNum.Text ~= "0" then
                local distance = (humanoidRootPart.Position - enemy.HumanoidRootPart.Position).magnitude
                if distance < dist then
                    dist = distance
                    nearest = enemy
                end
            end
        end
        return nearest
    end

    while task.wait() do
        if getgenv().Settings.AutoFarm then
            local nearestEnemy = GetEnemies()
            if nearestEnemy then
                if getgenv().Settings.WalkToEnemy then
                    if nearestEnemy:FindFirstChild("HumanoidRootPart") then
                        player.Character.Humanoid:MoveTo(nearestEnemy.HumanoidRootPart.Position)
                    end
                end
                if getgenv().Settings.DamageBoost then
                    for c, d in pairs(getgenv().Settings.mespetsequiper) do
                        local a = { [1] = { ["heroGuid"] = tostring(d), ["harmIndex"] = 1, ["isSkill"] = false, ["skillId"] = 200003 } }
                        game:GetService("ReplicatedStorage").Remotes.HeroSkillHarm:FireServer(unpack(a))
                    end
                end
                local args = { nearestEnemy:GetAttribute("EnemyGuid") }
                game:GetService("ReplicatedStorage").Remotes.ClickEnemy:InvokeServer(unpack(args))
                game:GetService("ReplicatedStorage").Remotes.PlayerClickAttack:FireServer(unpack(args))
            end
        end
    end
end)

FuseGemTab:MakeNotification({
    Name = "Level 10 Gems Toggle",
    Content = "Toggled " .. tostring(toggleState),
    Image = "rbxassetid://4483345998",
    Time = 3
})

FuseGemTab:AddButton({
    Name = "Level 10 Gems 🤑 ",
    Callback = toggleFuseLevel10Gems
})

local toggleState = false
local function toggleFuseLevel10Gems()
    toggleState = not toggleState
    if toggleState then
        getgenv().Settings.lv10gem = true
        pcall(function()
            local WeaponsInventory = require(game:GetService("ReplicatedStorage").Scripts.Client.Manager.PlayerManager)
            for _, v in pairs(WeaponsInventory.localPlayerData.gems) do
                pcall(function()
                    if v.equipPosition == nil or v.equipPosition == "" then
                        local args = {
                            [1] = {[1] = v.guid,[2] = v.guid,[3] = v.guid,[4] = v.guid,[5] = v.guid}}
                        game:GetService("ReplicatedStorage").Remotes.FuseGem:InvokeServer(unpack(args))
                        task.wait()
                    end
                end)
            end
        end)
    else
        getgenv().Settings.lv10gem = false
    end
end
