local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))() -- 
local Window = OrionLib:MakeWindow({Name = "Cool Hub", HidePremium = false, SaveConfig = true, ConfigFolder = "Sigma"});

local PlayerTab = Window:MakeTab({Name="Player",Icon="rbxassetid://4483345998",PremiumOnly=false});
local ScriptsTab = Window:MakeTab({Name="Scripts",Icon="rbxassetid://4483345998",PremiumOnly=false});
local WhtvrTab = Window:MakeTab({Name="Mount/Eggs",Icon="rbxassetid://4483345998",PremiumOnly=false});
local SNGTab = Window:MakeTab({Name="Sword And Gems",Icon="rbxassetid://4483345998",PremiumOnly=false});
local AccesoryTab = Window:MakeTab({Name="Roll-Tab-Legendary",Icon="rbxassetid://4483345998",PremiumOnly=false});
local MiscTab = Window:MakeTab({Name="Misc",Icon="rbxassetid://4483345998",PremiumOnly=false});

local TradeSec = PlayerTab:AddSection({Name="Trade"});
local Teleport = PlayerTab:AddSection({Name="Teleport"});
local EGG = WhtvrTab:AddSection({Name="Eggs"});
local EGG1 = WhtvrTab:AddSection({Name="Lock Your Pets Before Using."});
local FarmSec = ScriptsTab:AddSection({Name="Auto Farm"});
local FarmSec2 = ScriptsTab:AddSection({Name="Others"});
local SwordSec = SNGTab:AddSection({Name="Fuse/Sell Swords"});
local Lvl10 = SNGTab:AddSection({Name="Auto Sell/Lvl 10 gem(Need Gems To Work)"});

AccesoryTab:AddLabel("Will Need The Tokens needed to roll")

local tms = AccesoryTab:AddSection({Name="Talismans"});
local Legendary = AccesoryTab:AddSection({Name="Legendary"});
local Mythic = AccesoryTab:AddSection({Name="Mythic"});
local Claim = MiscTab:AddSection({Name="Claim"});
local Others = MiscTab:AddSection({Name="Others"});
local Others1 = MiscTab:AddSection({Name="Others"});


local WeaponsInventory = require(game:GetService("ReplicatedStorage").Scripts.Client.Manager.PlayerManager)
pcall(function()
    for _, v in pairs(WeaponsInventory.localPlayerData.heros) do
        if v.isEquip == true and v.isLock == true then
            table.insert(getgenv().Settings.mespetsequiper, v.guid)
        end
    end
end)


	while getgenv().Settings.DamageBoost then
		for _, petGuid in pairs(getgenv().Settings.mespetsequiper) do
		local args = { { ["heroGuid"] = tostring(petGuid), ["harmIndex"] = 1, ["isSkill"] = false, ["skillId"] = 200003 } }
		game:GetService("ReplicatedStorage").Remotes.HeroSkillHarm:FireServer(unpack(args))
              end
        end

FarmSec:AddToggle({Name="Auto Collect Drops",Callback=function(v1)
	if v1 then
		getgenv().Settings.GoldCollect = not getgenv().Settings.GoldCollect;
		if getgenv().Settings.GoldCollect then
			spawn(function()
				while wait() do
					for v8, v9 in pairs(game.Workspace.Golds:GetChildren()) do
						v9.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame;
					end
				end
			end);
		end
	end
end})

FarmSec2:AddToggle({Name="AutoGainPower",Default=getgenv().Settings.AutoAtk,Callback=function(Value)
	getgenv().Settings.AutoAtk = Value;
	if getgenv().Settings.AutoAtk then
		autoGainPowerLoop = game:GetService("RunService").Heartbeat:Connect(function()
			local remotes = game:GetService("ReplicatedStorage"):FindFirstChild("Remotes");
			if (remotes and remotes:FindFirstChild("PlayerClickAttack")) then
				remotes.PlayerClickAttack:FireServer();
			end
			wait(0.1);
		end);
	elseif autoGainPowerLoop then
		autoGainPowerLoop:Disconnect();
		autoGainPowerLoop = nil;
	end
end});

FarmSec2:AddToggle({Name = "Auto Rebirth",Default = getgenv().Settings.AutoReborn,Callback = function(Value)
            getgenv().Settings.AutoReborn = Value;
            if Value then
                while getgenv().Settings.AutoReborn do
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PlayerReborn"):FireServer()
                    wait(1)
                end
            end
        end,
    })

SwordSec:AddToggle({Name="Auto Fuse Swords",Callback=function(autoFuseSwords)
	if autoFuseSwords then
		getgenv().Settings.autoFuseSwords = true;
		while getgenv().Settings.autoFuseSwords do
			wait(1);
			pcall(function()
				game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("FuseWeapon"):FireServer();
			end);
		end
	else
		getgenv().Settings.autoFuseSwords = false;
	end
end});


local WeaponsInventory = require(game:GetService("ReplicatedStorage").Scripts.Client.Manager.PlayerManager);

pcall(function()
    if WeaponsInventory.localPlayerData then
        for _, v in pairs(WeaponsInventory.localPlayerData.weapons) do
            if v.isEquip and v.isLock then
                table.insert(getgenv().Settings.mespetsequiper, v.guid);
            end
        end
    else
        print("localPlayerData is not loaded yet. Please try again later.")
    end
end);

SwordSec:AddToggle({
    Name="Auto Delete Weapons",
    Callback=function(autoSellWeapons)
        if autoSellWeapons then
            getgenv().Settings.autoSellWeapons = true;
            while getgenv().Settings.autoSellWeapons do
                wait(1);
                if WeaponsInventory.localPlayerData then
                    for _, v in pairs(WeaponsInventory.localPlayerData.weapons) do
                        if not v.isEquip and not v.isLock then
                            local args = {[1]={[1]=v.guid}};
                            game:GetService("ReplicatedStorage").Remotes.DeleteWeapons:FireServer(unpack(args));
                        end
                    end
                else
                    print("localPlayerData is not loaded yet. Please try again later.")
                end
            end
        else
            getgenv().Settings.autoSellWeapons = false;
        end
    end
});

SwordSec:AddToggle({Name="Auto Forge Equipped Sword",Callback=function(autoForgeSword)
	if autoForgeSword then
		getgenv().Settings.autoForgeSword = true;
		while getgenv().Settings.autoForgeSword do
			wait(1e-7);
			for _, v in pairs(WeaponsInventory.localPlayerData.weapons) do
				if v.isEquip then
					local args = {[1]=v.guid};
					game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ForgeWeapon"):InvokeServer(unpack(args));
				end
			end
		end
	else
		getgenv().Settings.autoForgeSword = false;
	end
end});

EGG:AddDropdown({
    Name = "Pick Egg",
    Default = "",
    Options = {"World 1","World 2","World 3","World 4","World 5","World 6","World 7","World 8","World 9","Naruto","One Piece","World 12","World 13"},
    Callback = function(Value)
        local EGGS = {
            ["World 1"] = 70001,
            ["World 2"] = 70003,
            ["World 3"] = 70005,
            ["World 4"] = 70007,
            ["World 5"] = 70009,
            ["World 6"] = 70011,
            ["World 7"] = 70013,
            ["World 8"] = 70015,
            ["World 9"] = 70017,
            ["Naruto"] = 70019,
            ["One Piece"] = 70021,
            ["World 12"] = 70023,
            ["World 13"] = 70025,
        }
        EGG.EggId = EGGS[Value]
    end
})

EGG:AddToggle({
    Name = "Open Eggs",
    Callback = function(Value)
        getgenv().Settings.openEgg = Value
        if Value then
            while getgenv().Settings.openEgg do
                local args = {
                    [1] = {
                        ["drawCardPlatformId"] = EGG.EggId,
                        ["count"] = 10
                    }
                }
                local success, errorMessage = pcall(function()
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ExtractHero"):InvokeServer(unpack(args))
                end)
                if not success then
                    print("Error:", errorMessage)
                end
                wait(0.1) -- adjust the delay as needed
            end
        end
    end
})

local BurgerInventory = require(game:GetService("ReplicatedStorage").Scripts.Client.Manager.PlayerManager);

pcall(function()
    if BurgerInventory.localPlayerData then
        for _, v in pairs(BurgerInventory.localPlayerData.heros) do
            if v.isEquip and v.isLock then
                table.insert(getgenv().Settings.mespetsequiper, v.guid);
            end
        end
    else
        print("localPlayerData is not loaded yet. Please try again later.")
    end
end);

EGG1:AddLabel("Will Fuse to Equiped Heroes")
EGG1:AddLabel("Will Delete/Fuse The Uneqquiped and Unlocked Heroes")


EGG1:AddToggle({
    Name="Auto Delete Heroes",
    Callback=function(autoSellHeroes)
        if autoSellHeroes then
            getgenv().Settings.autoSellHeroes = true;
            while getgenv().Settings.autoSellHeroes do
                wait(1);
                if BurgerInventory.localPlayerData then
                    for _, v in pairs(BurgerInventory.localPlayerData.heros) do
                        if not v.isEquip and not v.isLock then
                            local x = {[1]={[1]=v.guid}};
                            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("DeleteHero"):FireServer(unpack(x))
                        end
                    end
                else
                    print("localPlayerData is not loaded yet. Please try again later.")
                end
            end
        else
            getgenv().Settings.autoSellHeroes = false;
        end
    end
});

EGG1:AddToggle({
    Name="Auto Fuse Heroes",
    Callback=function(autoFuseHeroes)
        if autoFuseHeroes then
            getgenv().Settings.autoFuseHeroes = true;
            while getgenv().Settings.autoFuseHeroes do
                wait(1);
                if BurgerInventory.localPlayerData then
                    local equippedHeroGuid = nil;
                    local unequippedHeroGuids = {};
                    for _, v in pairs(BurgerInventory.localPlayerData.heros) do
                        if v.isEquip and v.isLock then
                            equippedHeroGuid = v.guid;
                        elseif not v.isEquip and not v.isLock then
                            table.insert(unequippedHeroGuids, v.guid);
                        end
                    end
                    if equippedHeroGuid and #unequippedHeroGuids > 0 then
                        local args = {
                            [1] = {
                                ["mainHeroGuid"] = equippedHeroGuid,
                                ["decomposeHeroGuids"] = unequippedHeroGuids
                            }
                        };
                        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("HeroFuse"):FireServer(unpack(args));
                    end
                else
                    print("localPlayerData is not loaded yet. Please try again later.")
                end
            end
        else
            getgenv().Settings.autoFuseHeroes = false;
        end
    end
});

Lvl10:AddToggle({Name="Fuse Level 10 Gems",Callback=function(fuseLevel10Gems)
	if fuseLevel10Gems then
		getgenv().Settings.fuseLevel10Gems = true;
		pcall(function()
			local WeaponsInventory = require(game:GetService("ReplicatedStorage").Scripts.Client.Manager.PlayerManager);
			for _, gem in pairs(WeaponsInventory.localPlayerData.gems) do
				pcall(function()
					if ((gem.equipPosition == nil) or (gem.equipPosition == "")) then
						local args = {[1]={[1]=gem.guid,[2]=gem.guid,[3]=gem.guid,[4]=gem.guid,[5]=gem.guid}};
						game:GetService("ReplicatedStorage").Remotes.FuseGem:InvokeServer(unpack(args));
						wait();
					end
				end);
			end
		end);
	else
		getgenv().Settings.fuseLevel10Gems = false;
	end
end});


function rerollLegendaryMask()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400001};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410001") and (tostring(rerollResult.ornamentId) ~= "410002") and (tostring(rerollResult.ornamentId) ~= "410003") and (tostring(rerollResult.ornamentId) ~= "410004") and (tostring(rerollResult.ornamentId) ~= "410005")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if ((tostring(rerollResult.ornamentId) == "410004") or (tostring(rerollResult.ornamentId) == "410005")) then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410004") then
				rerollType = "Legendary";
			elseif (tostring(rerollResult.ornamentId) == "410005") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end
function rerollLegendaryAwakening()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400002};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410006") and (tostring(rerollResult.ornamentId) ~= "410007") and (tostring(rerollResult.ornamentId) ~= "410008") and (tostring(rerollResult.ornamentId) ~= "410009") and (tostring(rerollResult.ornamentId) ~= "410010")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if ((tostring(rerollResult.ornamentId) == "410009") or (tostring(rerollResult.ornamentId) == "410010")) then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410009") then
				rerollType = "Legendary";
			elseif (tostring(rerollResult.ornamentId) == "410010") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end
function rerollLegendaryOrnament()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400003};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410011") and (tostring(rerollResult.ornamentId) ~= "410012") and (tostring(rerollResult.ornamentId) ~= "410013") and (tostring(rerollResult.ornamentId) ~= "410014") and (tostring(rerollResult.ornamentId) ~= "410015")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if ((tostring(rerollResult.ornamentId) == "410014") or (tostring(rerollResult.ornamentId) == "410015")) then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410014") then
				rerollType = "Legendary";
			elseif (tostring(rerollResult.ornamentId) == "410015") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end
function rerollLegendaryTrail()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400004};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410016") and (tostring(rerollResult.ornamentId) ~= "410017") and (tostring(rerollResult.ornamentId) ~= "410018") and (tostring(rerollResult.ornamentId) ~= "410019") and (tostring(rerollResult.ornamentId) ~= "410020")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if ((tostring(rerollResult.ornamentId) == "410019") or (tostring(rerollResult.ornamentId) == "410020")) then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410019") then
				rerollType = "Legendary";
			elseif (tostring(rerollResult.ornamentId) == "410020") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end
function rerollMythicMask()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400001};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410001") and (tostring(rerollResult.ornamentId) ~= "410002") and (tostring(rerollResult.ornamentId) ~= "410003") and (tostring(rerollResult.ornamentId) ~= "410004") and (tostring(rerollResult.ornamentId) ~= "410005")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if (tostring(rerollResult.ornamentId) == "410005") then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410005") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end
function rerollMythicAwakening()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400002};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410006") and (tostring(rerollResult.ornamentId) ~= "410007") and (tostring(rerollResult.ornamentId) ~= "410008") and (tostring(rerollResult.ornamentId) ~= "410009") and (tostring(rerollResult.ornamentId) ~= "410010")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if (tostring(rerollResult.ornamentId) == "410010") then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410010") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end
function rerollMythicOrnament()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400003};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410011") and (tostring(rerollResult.ornamentId) ~= "410012") and (tostring(rerollResult.ornamentId) ~= "410013") and (tostring(rerollResult.ornamentId) ~= "410014") and (tostring(rerollResult.ornamentId) ~= "410015")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if (tostring(rerollResult.ornamentId) == "410015") then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410015") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end
function rerollMythicTrail()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400004};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410016") and (tostring(rerollResult.ornamentId) ~= "410017") and (tostring(rerollResult.ornamentId) ~= "410018") and (tostring(rerollResult.ornamentId) ~= "410019") and (tostring(rerollResult.ornamentId) ~= "410020")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if (tostring(rerollResult.ornamentId) == "410020") then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410020") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end
local function rerollTalismans()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400005};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410021") and (tostring(rerollResult.ornamentId) ~= "410022") and (tostring(rerollResult.ornamentId) ~= "410023") and (tostring(rerollResult.ornamentId) ~= "410024") and (tostring(rerollResult.ornamentId) ~= "410025") and (tostring(rerollResult.ornamentId) ~= "410026") and (tostring(rerollResult.ornamentId) ~= "410027") and (tostring(rerollResult.ornamentId) ~= "410028")) then
			print("Unknown reroll found! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		elseif ((tostring(rerollResult.ornamentId) == "410025") or (tostring(rerollResult.ornamentId) == "410026") or (tostring(rerollResult.ornamentId) == "410027") or (tostring(rerollResult.ornamentId) == "410028")) then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410025") then
				rerollType = "As One Wishes";
			elseif (tostring(rerollResult.ornamentId) == "410026") then
				rerollType = "Magic Tome";
			elseif (tostring(rerollResult.ornamentId) == "410027") then
				rerollType = "Imperial Jade Seal";
			elseif (tostring(rerollResult.ornamentId) == "410028") then
				rerollType = "Quinta";
			end
			print("!! REROLL FOUND!! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped!");
end
tms:AddButton({Name="Reroll Talismans",Callback=rerollTalismans});
Legendary:AddButton({Name="Reroll Mask",Callback=rerollLegendaryMask});
Legendary:AddButton({Name="Reroll Awakening",Callback=rerollLegendaryAwakening});
Legendary:AddButton({Name="Reroll Ornament",Callback=rerollLegendaryOrnament});
Legendary:AddButton({Name="Reroll Trail",Callback=rerollLegendaryTrail});
Mythic:AddButton({Name="Reroll Mask",Callback=rerollMythicMask});
Mythic:AddButton({Name="Reroll Awakening",Callback=rerollMythicAwakening});
Mythic:AddButton({Name="Reroll Ornament",Callback=rerollMythicOrnament});
Mythic:AddButton({Name="Reroll Trail",Callback=rerollMythicTrail});

Claim:AddButton({Name="Group Rewards",Callback=function()
	while wait() do
		game:GetService("ReplicatedStorage").Remotes.ClaimGroupReward:InvokeServer();
	end
end});

Claim:AddButton({Name="Daily Gifts",Callback=function()
	while wait() do
		for x = 1, 7 do
			local args = {[1]=x};
			game:GetService("ReplicatedStorage").Remotes.ClaimSevenLoginReward:FireServer(unpack(args));
		end
	end
end});

Claim:AddButton({Name="Redeem Spins",Callback=function()
	while wait() do
		for x = 1, 8 do
			local args = {[1]=x};
			game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ClaimActivitySpinTicket"):InvokeServer(unpack(args));
		end
	end
end});


spawn(function()
	while wait(600) do
		local VirtualUser = game:service("VirtualUser");
		VirtualUser:CaptureController();
		VirtualUser:ClickButton2(Vector2.new());
	end
end);
