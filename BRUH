local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Orion/main/source"))();
local Window = OrionLib:MakeWindow({Name = "Blade Slayer", HidePremium = false, SaveConfig = true, ConfigFolder = "Goku",IntroEnabled= true,IntroText="Cool Hub"})

getgenv().Settings = {AutoAtk=false,mespetsequiper={},Range=500,AutoFarm=false,WalkToEnemy=false,DamageBoost=false,GoldCollect=false,AutoReborn=false,autodungeon=false,deleteGems=false,fuseLevel10Gems=false,autoFuseSwords=false,autoSellWeapons=false,autoForgeSword=false};

local PlayerTab = Window:MakeTab({Name="Player",Icon="rbxassetid://4483345998",PremiumOnly=false});
local ScriptsTab = Window:MakeTab({Name="Scripts",Icon="rbxassetid://4483345998",PremiumOnly=false});
local TeleportTab = Window:MakeTab({Name="Teleport",Icon="rbxassetid://4483345998",PremiumOnly=false});
local AutoDRTab = Window:MakeTab({Name="Auto-Dungeon/Raid",Icon="rbxassetid://4483345998",PremiumOnly=false});
local SNGTab = Window:MakeTab({Name="Sword And Gems",Icon="rbxassetid://4483345998",PremiumOnly=false});
local AccesoryTab = Window:MakeTab({Name="Roll-Tab-Legendary",Icon="rbxassetid://4483345998",PremiumOnly=false});
local MiscTab = Window:MakeTab({Name="Misc",Icon="rbxassetid://4483345998",PremiumOnly=false});

local TradeSec = PlayerTab:AddSection({Name="Trade"});
local EMount = PlayerTab:AddSection({Name="Mounts"});
local FarmSec = ScriptsTab:AddSection({Name="Auto Farm"});
local FarmSec2 = ScriptsTab:AddSection({Name="Others"});
local DungeonSec = AutoDRTab:AddSection({Name="Dungeon"});
local Raid = AutoDRTab:AddSection({Name="Raid(WIP)"});
local SwordSec = SNGTab:AddSection({Name="Fuse/Sell Swords"});
local Lvl10 = SNGTab:AddSection({Name="Auto Lvl 10 gem(Need Gems To Work)"});
local Del1to9 = SNGTab:AddSection({Name="Delete Gem"});
local Legendary = AccesoryTab:AddSection({Name="Legendary"});
local Mythic = AccesoryTab:AddSection({Name="Mythic"});
local Claim = MiscTab:AddSection({Name="Claim"});
local Others = MiscTab:AddSection({Name="Others"});


local nameMap = {[100001]="Cloud",[100002]="Lightning Cloud",[100003]="Gold Cloud",[100004]="Magic Skateboard",[100005]="Sci-Fi Skateboard",[100006]="Pomni",[100007]="Doge Car",[100008]="Magic Carpet",[100009]="Tron Bike",[100010]="Fire Wheel",[100011]="Water Wheel",[100012]="Sleigh",[100013]="Banana Car",[100014]="Flying Swords",[100015]="Motor Bike",[100016]="Broken Sky",[100017]="Broom",[100018]="Rubber Ducky",[100019]="Bat Mobile",[100020]="Tank",[100021]="Superman",[100022]="UFO",[100023]="Rocket",[100024]="Pirate Ship",[100025]="Leaf",[100026]="Plane"};
local mountNames = {};
for _, name in pairs(nameMap) do
	table.insert(mountNames, name);
end
EMount:AddDropdown({Name="Select Mount",Options=mountNames,Callback=function(selectedMount)
	getgenv().Settings.selectedMount = selectedMount;
end});
EMount:AddButton({Name="Use Selected Mount",Callback=function()
	if getgenv().Settings.selectedMount then
		for id, name in pairs(nameMap) do
			if (name == getgenv().Settings.selectedMount) then
				local args = {[1]=id};
				game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("EquipMount"):FireServer(unpack(args));
				break;
			end
		end
	else
		warn("No mount selected.");
	end
end});

local playerNames = {};
for _, player in pairs(game.Players:GetPlayers()) do
	table.insert(playerNames, player.Name);
end
TradeSec:AddDropdown({Name="Select Player",Options=playerNames,Callback=function(selectedPlayer)
	getgenv().Settings.selectedPlayer = selectedPlayer;
end});
TradeSec:AddButton({Name="Trade Selected Player",Callback=function()
	if getgenv().Settings.selectedPlayer then
		game:GetService("ReplicatedStorage").Remotes.SendTrade:InvokeServer(game:GetService("Players")[getgenv().Settings.selectedPlayer]);
	else
		warn("No player selected.");
	end
end});
TradeSec:AddButton({Name="Dupe(Need To Trade)",Callback=function()
	game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("DeleteMultipleHero"):Destroy();
end});

FarmSec:AddToggle({Name="Auto Farm",Callback=function(v0)
	if v0 then
		getgenv().Settings.AutoFarm = true;
	else
		getgenv().Settings.AutoFarm = false;
	end
end});

FarmSec:AddToggle({Name="Auto Collect Drops",Callback=function(v1)
	if v1 then
		getgenv().Settings.GoldCollect = not getgenv().Settings.GoldCollect;
		if getgenv().Settings.GoldCollect then
			spawn(function()
				while wait() do
					for v8, v9 in pairs(game.Workspace.Golds:GetChildren()) do
						v9.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame;
					end
				end
			end);
		end
	end
end});

FarmSec:AddToggle({Name="Damage Boost",Callback=function(v2)
	if v2 then
		getgenv().Settings.DamageBoost = true;
	else
		getgenv().Settings.DamageBoost = false;
	end
end});

spawn(function()
	local function GetEnemies()
		local nearest, dist = nil, getgenv().Settings.Range;
		local Players = game.Players;
		local localPlayer = Players.LocalPlayer;
		local localCharacter = localPlayer.Character;
		local humanoidRootPart = localCharacter and localCharacter:FindFirstChild("HumanoidRootPart");
		if not humanoidRootPart then
			return;
		end
		for _, enemy in pairs(Workspace.Enemys:GetChildren()) do
			if (enemy:FindFirstChild("HumanoidRootPart") and enemy.HumanoidRootPart:FindFirstChild("EnemyNameGui") and (enemy.HumanoidRootPart.EnemyNameGui.HealthNum.Text ~= "0")) then
				local distance = (humanoidRootPart.Position - enemy.HumanoidRootPart.Position).magnitude;
				if (distance < dist) then
dist = distance;
					nearest = enemy;
				end
			end
		end
		return nearest;
	end
	while task.wait() do
		if getgenv().Settings.AutoFarm then
			local nearestEnemy = GetEnemies();
			if nearestEnemy then
				if getgenv().Settings.WalkToEnemy then
					if nearestEnemy:FindFirstChild("HumanoidRootPart") then
						player.Character.Humanoid:MoveTo(nearestEnemy.HumanoidRootPart.Position);
					end
				end
				if getgenv().Settings.DamageBoost then
					for c, d in pairs(getgenv().Settings.mespetsequiper) do
						local a = {[1]={heroGuid=tostring(d),harmIndex=1,isSkill=false,skillId=200003}};
						game:GetService("ReplicatedStorage").Remotes.HeroSkillHarm:FireServer(unpack(a));
					end
				end
				local args = {nearestEnemy:GetAttribute("EnemyGuid")};
				game:GetService("ReplicatedStorage").Remotes.ClickEnemy:InvokeServer(unpack(args));
				game:GetService("ReplicatedStorage").Remotes.PlayerClickAttack:FireServer(unpack(args));
			end
		end
	end
end);

FarmSec2:AddToggle({Name="AutoGainPower",Default=Settings.AutoAtk,Callback=function(Value)
	Settings.AutoAtk = Value;
	if Settings.AutoAtk then
		autoGainPowerLoop = game:GetService("RunService").Heartbeat:Connect(function()
			local remotes = game:GetService("ReplicatedStorage"):FindFirstChild("Remotes");
			if (remotes and remotes:FindFirstChild("PlayerClickAttack")) then
				remotes.PlayerClickAttack:FireServer();
			end
			wait(0.1);
		end);
	elseif autoGainPowerLoop then
		autoGainPowerLoop:Disconnect();
		autoGainPowerLoop = nil;
	end
end});

FarmSec2:AddToggle({Name = "Auto Rebirth",Default = Settings.AutoReborn,Callback = function(Value)
            Settings.AutoReborn = Value;
            if Value then
                while Settings.AutoReborn do
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PlayerReborn"):FireServer()
                    wait(1)
                end
            end
        end,
    })



SwordSec:AddToggle({Name="Auto Fuse Swords",Callback=function(autoFuseSwords)
	if autoFuseSwords then
		getgenv().Settings.autoFuseSwords = true;
		while getgenv().Settings.autoFuseSwords do
			wait(1);
			pcall(function()
				game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("FuseWeapon"):FireServer();
			end);
		end
	else
		getgenv().Settings.autoFuseSwords = false;
	end
end});

SwordSec:AddToggle({Name="Auto Delete Unequipped Weapons",Callback=function(autoSellWeapons)
	if autoSellWeapons then
		getgenv().Settings.autoSellWeapons = true;
		while getgenv().Settings.autoSellWeapons do
			wait(1);
			for _, v in pairs(WeaponsInventory.localPlayerData.weapons) do
				if not v.isEquip and not v.isLock then
					local args = {[1]={[1]=v.guid}};
					game:GetService("ReplicatedStorage").Remotes.DeleteWeapons:FireServer(unpack(args));
				end
			end
		end
	else
		getgenv().Settings.autoSellWeapons = false;
	end
end});

local WeaponsInventory = require(game:GetService("ReplicatedStorage").Scripts.Client.Manager.PlayerManager);
pcall(function()
	for _, v in pairs(WeaponsInventory.localPlayerData.heros) do
		if (v.isEquip == true) then
			table.insert(getgenv().Settings.mespetsequiper, v.guid);
		end
	end
end);

SwordSec:AddToggle({Name="Auto Forge Equipped Sword",Callback=function(autoForgeSword)
	if autoForgeSword then
		getgenv().Settings.autoForgeSword = true;
		while getgenv().Settings.autoForgeSword do
			wait(1e-7);
			for _, v in pairs(WeaponsInventory.localPlayerData.weapons) do
				if v.isEquip then
					local args = {[1]=v.guid};
					game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ForgeWeapon"):InvokeServer(unpack(args));
				end
			end
		end
	else
		getgenv().Settings.autoForgeSword = false;
	end
end});

TeleportTab:AddButton({Name="Fantasy Valley(World 1)",Callback=function()
	local args = {[1]={mapId=50001}};
	game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args));
end});

TeleportTab:AddButton({Name="Seaside Villa(World 2)",Callback=function()
	local args = {[1]={mapId=50002}};
	game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args));
end});

TeleportTab:AddButton({Name="Congress Hall(World 3)",Callback=function()
	local args = {[1]={mapId=50003}};
	game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args));
end});

TeleportTab:AddButton({Name="Border Territory(World 4)",Callback=function()
	local args = {[1]={mapId=50004}};
	game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args));
end});

TeleportTab:AddButton({Name="Polar Plain(World 5)",Callback=function()
	local args = {[1]={mapId=50005}};
	game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args));
end});

TeleportTab:AddButton({Name="Ghost Forest(World 6)",Callback=function()
	local args = {[1]={mapId=50006}};
	game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args));
end});

TeleportTab:AddButton({Name="Demon Station(World 7)",Callback=function()
	local args = {[1]={mapId=50007}};
	game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args));
end});

TeleportTab:AddButton({Name="Hashira Training(World 8)",Callback=function()
	local args = {[1]={mapId=50008}};
	game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args));
end});

TeleportTab:AddButton({Name="Infinite City(World 9)",Callback=function()
	local args = {[1]={mapId=50009}};
	game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args));
end});

TeleportTab:AddButton({Name="One Punch Man(World 10)",Callback=function()local args = {[1]={mapId=50010}};
	game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args));
end});

local mapData = {
    [50001] = "Fantasy Valley(World 1)",
    [50002] = "Seaside Villa(World 2)",
    [50003] = "Congress Hall(World 3)",
    [50004] = "Border Territory(World 4)",
    [50005] = "Polar Plain(World 5)",
    [50006] = "Ghost Forest(World 6)",
    [50007] = "Demon Station(World 7)",
    [50008] = "Hashira Training(World 8)",
    [50009] = "Infinite City(World 9)",
    [50010] = "One Punch Man(World 10)",
};

local mapNames = {};
for _, name in pairs(mapData) do
    table.insert(mapNames, name);
end

DungeonSec:AddDropdown({
    Name = "Select Return Map",
    Options = mapNames,
    Callback = function(selectedMap)
        getgenv().Settings.selectedReturnMap = selectedMap;
    end
});

local function TeleportToAndFromDungeon(dungeonMapId, returnMapId, returnTime)
    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer({mapId = 50016});
    wait(returnTime);
    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer({mapId = returnMapId});
end

local AutoDungeonToggle = DungeonSec:AddToggle({
    Name = "Auto-Dungeon",
    Default = false,
    Callback = function(Value)
        if Value then
            while true do
                local currentTime = os.time();
                local nextTeleportTime = (math.ceil(currentTime / (30 * 60)) * 30 * 60) - 15;
                local waitTime = nextTeleportTime - currentTime;
                wait(waitTime);
                TeleportToAndFromDungeon(50001, 1, 300);
            end
        end
    end
});



Lvl10:AddToggle({Name="Fuse Level 10 Gems",Callback=function(fuseLevel10Gems)
	if fuseLevel10Gems then
		getgenv().Settings.fuseLevel10Gems = true;
		pcall(function()
			local WeaponsInventory = require(game:GetService("ReplicatedStorage").Scripts.Client.Manager.PlayerManager);
			for _, gem in pairs(WeaponsInventory.localPlayerData.gems) do
				pcall(function()
					if ((gem.equipPosition == nil) or (gem.equipPosition == "")) then
						local args = {[1]={[1]=gem.guid,[2]=gem.guid,[3]=gem.guid,[4]=gem.guid,[5]=gem.guid}};
						game:GetService("ReplicatedStorage").Remotes.FuseGem:InvokeServer(unpack(args));
						wait();
					end
				end);
			end
		end);
	else
		getgenv().Settings.fuseLevel10Gems = false;
	end
end});

Del1to9:AddToggle({Name="Delete Gems",Callback=function(deleteGems)
	if deleteGems then
		getgenv().Settings.deleteGems = true;
		pcall(function()
			local WeaponsInventory = require(game:GetService("ReplicatedStorage").Scripts.Client.Manager.PlayerManager);
			for _, gem in pairs(WeaponsInventory.localPlayerData.gems) do
				pcall(function()
					if ((gem.equipPosition == nil) or (gem.equipPosition == "")) then
						local args = {[1]={[1]=gem.guid}};
						game:GetService("ReplicatedStorage").Remotes.FuseGem:InvokeServer(unpack(args));
						wait();
					end
				end);
			end
		end);
	else
		getgenv().Settings.deleteGems = false;
	end
end});

function rerollLegendaryMask()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400001};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410001") and (tostring(rerollResult.ornamentId) ~= "410002") and (tostring(rerollResult.ornamentId) ~= "410003") and (tostring(rerollResult.ornamentId) ~= "410004") and (tostring(rerollResult.ornamentId) ~= "410005")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if ((tostring(rerollResult.ornamentId) == "410004") or (tostring(rerollResult.ornamentId) == "410005")) then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410004") then
				rerollType = "Legendary";
			elseif (tostring(rerollResult.ornamentId) == "410005") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end

function rerollLegendaryAwakening()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400002};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410006") and (tostring(rerollResult.ornamentId) ~= "410007") and (tostring(rerollResult.ornamentId) ~= "410008") and (tostring(rerollResult.ornamentId) ~= "410009") and (tostring(rerollResult.ornamentId) ~= "410010")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if ((tostring(rerollResult.ornamentId) == "410009") or (tostring(rerollResult.ornamentId) == "410010")) then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410009") then
				rerollType = "Legendary";
			elseif (tostring(rerollResult.ornamentId) == "410010") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end

function rerollLegendaryOrnament()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400003};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410011") and (tostring(rerollResult.ornamentId) ~= "410012") and (tostring(rerollResult.ornamentId) ~= "410013") and (tostring(rerollResult.ornamentId) ~= "410014") and (tostring(rerollResult.ornamentId) ~= "410015")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));rerollFound = true;
		end
		if ((tostring(rerollResult.ornamentId) == "410014") or (tostring(rerollResult.ornamentId) == "410015")) then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410014") then
				rerollType = "Legendary";
			elseif (tostring(rerollResult.ornamentId) == "410015") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end

function rerollLegendaryTrail()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400004};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410016") and (tostring(rerollResult.ornamentId) ~= "410017") and (tostring(rerollResult.ornamentId) ~= "410018") and (tostring(rerollResult.ornamentId) ~= "410019") and (tostring(rerollResult.ornamentId) ~= "410020")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if ((tostring(rerollResult.ornamentId) == "410019") or (tostring(rerollResult.ornamentId) == "410020")) then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410019") then
				rerollType = "Legendary";
			elseif (tostring(rerollResult.ornamentId) == "410020") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end

function rerollMythicMask()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400001};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410001") and (tostring(rerollResult.ornamentId) ~= "410002") and (tostring(rerollResult.ornamentId) ~= "410003") and (tostring(rerollResult.ornamentId) ~= "410004") and (tostring(rerollResult.ornamentId) ~= "410005")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if (tostring(rerollResult.ornamentId) == "410005") then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410005") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end

function rerollMythicAwakening()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400002};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410006") and (tostring(rerollResult.ornamentId) ~= "410007") and (tostring(rerollResult.ornamentId) ~= "410008") and (tostring(rerollResult.ornamentId) ~= "410009") and (tostring(rerollResult.ornamentId) ~= "410010")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if (tostring(rerollResult.ornamentId) == "410010") then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410010") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end

function rerollMythicOrnament()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400003};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410011") and (tostring(rerollResult.ornamentId) ~= "410012") and (tostring(rerollResult.ornamentId) ~= "410013") and (tostring(rerollResult.ornamentId) ~= "410014") and (tostring(rerollResult.ornamentId) ~= "410015")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if (tostring(rerollResult.ornamentId) == "410015") then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410015") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end

function rerollMythicTrail()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400004};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410016") and (tostring(rerollResult.ornamentId) ~= "410017") and (tostring(rerollResult.ornamentId) ~= "410018") and (tostring(rerollResult.ornamentId) ~= "410019") and (tostring(rerollResult.ornamentId) ~= "410020")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if (tostring(rerollResult.ornamentId) == "410020") then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410020") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end

Legendary:AddButton({Name="Reroll Mask",Callback=rerollLegendaryMask});
Legendary:AddButton({Name="Reroll Awakening",Callback=rerollLegendaryAwakening});
Legendary:AddButton({Name="Reroll Ornament",Callback=rerollLegendaryOrnament});
Legendary:AddButton({Name="Reroll Trail",Callback=rerollLegendaryTrail});
Mythic:AddButton({Name="Reroll Mask",Callback=rerollMythicMask});
Mythic:AddButton({Name="Reroll Awakening",Callback=rerollMythicAwakening});
Mythic:AddButton({Name="Reroll Ornament",Callback=rerollMythicOrnament});
Mythic:AddButton({Name="Reroll Trail",Callback=rerollMythicTrail});

Claim:AddButton({Name="Group Rewards",Callback=function()
	while wait() do
		game:GetService("ReplicatedStorage").Remotes.ClaimGroupReward:InvokeServer();
	end
end});

Claim:AddButton({Name="Daily Gifts",Callback=function()
	while wait() do
		for x = 1, 7 do
			local args = {[1]=x};
			game:GetService("ReplicatedStorage").Remotes.ClaimSevenLoginReward:FireServer(unpack(args));
		end
	end
end});

Claim:AddButton({Name="Redeem Codes",Callback=function()
	while wait() do
		for x = 1, 40 do
			local args = {[1]=x};
			game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("GiftCodeReceived"):InvokeServer(unpack(args));
		end
	end
end});

Claim:AddButton({Name="Redeem Spins",Callback=function()
	while wait() do
		for x = 1, 8 do
			local args = {[1]=x};
			game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ClaimActivitySpinTicket"):InvokeServer(unpack(args));
		end
	end
end});

Others:AddButton({Name="SimpleSpy",Callback=function()
	loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/78n/SimpleSpy/main/SimpleSpyBeta.lua"))();
end});

spawn(function()
	while wait(15) do
		local VirtualUser = game:service("VirtualUser");
		VirtualUser:CaptureController();
		VirtualUser:ClickButton2(Vector2.new());
	end
end);

Others:AddButton({Name="Fps Booster",Callback=function()
	for a, b in pairs(game.ReplicatedStorage.SkillEffects:GetDescendants()) do
		if (b:IsA("Part") or b:IsA("MeshPart")) then
			b.Transparency = 1;
		end
		if (b:IsA("ParticleEmitter") or b:IsA("Beam")) then
			b.Enabled = false;
		end
	end
	game.ReplicatedStorage.Effect.AttackNum.Enabled = false;
	local c = game;
	local d = c.Workspace;
	local e = c.Lighting;
	local f = d.Terrain;
	f.WaterWaveSize = 0;
	f.WaterWaveSpeed = 0;
	f.WaterReflectance = 0;
	f.WaterTransparency = 0;
	e.GlobalShadows = false;
	e.FogEnd = 8999999488;
	e.Brightness = 0;
	settings().Rendering.QualityLevel = "Level01";
	for g, h in pairs(c:GetDescendants()) do
		if (h:IsA("Part") or h:IsA("Union") or h:IsA("CornerWedgePart") or h:IsA("TrussPart")) then
			h.Reflectance = 0;
		elseif (h:IsA("Decal") or h:IsA("Texture")) then
			h.Transparency = 0;
		elseif (h:IsA("ParticleEmitter") or h:IsA("Trail")) then
			h.Lifetime = NumberRange.new(0);
		elseif h:IsA("Explosion") then
			h.BlastPressure = 0;
			h.BlastRadius = 0;
		elseif (h:IsA("Fire") or h:IsA("SpotLight") or h:IsA("Smoke") or h:IsA("Sparkles")) then
			h.Enabled = false;
		elseif h:IsA("MeshPart") then
			h.Reflectance = 0;
		end
	end
	for g, i in pairs(e:GetChildren()) do
		if (i:IsA("BlurEffect") or i:IsA("SunRaysEffect") or i:IsA("ColorCorrectionEffect") or i:IsA("BloomEffect") or i:IsA("DepthOfFieldEffect")) then
			i.Enabled = false;
		end
	end
	sethiddenproperty(game.Lighting, "Technology", "Compatibility");
end});


OrionLib:Init();
